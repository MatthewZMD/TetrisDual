#+TITLE: Biquadris UML
#+AUTHOR: Mingde Zeng, Qizhao Huang, Xiaoyang Lin
#+EMAIL: m8zeng@uwaterloo.ca, q89huang@uwaterloo.ca, x229lin@uwaterloo.ca
#+begin_src plantuml :file ./uml1.png
  @startuml
  skinparam classAttributeIconSize 0
  class Game {
          + boards: Vector<Board>
          + hiScore: Integer
          + playerTurn: Integer
  }

  class Board {
          + thisBlock: Block
          + nextBlock: Block
          + score: Integer
          + level: Level
          + countTurn: Integer
          + boardDisplay: TextDisplay
          + {abstract} left(): void
          + {abstract} right(): void
          + {abstract} rotate(bool isClockwise): void
          + {abstract} down(): void
          + {abstract} drop(): void
          + {abstract} levelUp(): void
          + {abstract} levelDown(): void
          + {abstract} display(): Vector<Vector<Character>>
          + notify(Subject): void
  }

  Observer <|-- Board

  Subject <|-- Board

  Game *-- Board

  class ConcreteBoard {
          + allCells: Vector<Vector<Cell>>
          + left(): void
          + right(): void
          + rotate(bool isClockwise): void
          + down(): void
          + drop(): void
          + levelUp(): void
          + levelDown(): void
          + display(): Vector<Vector<Character>>
  }

  class TextDisplay {
          + boardString: Vector<Vector<Character>>
  }

  Observer <|-- TextDisplay

  TextDisplay o-- Board

  Board *-- TextDisplay

  Board <|-- ConcreteBoard

  class BoardDecorator {
          # component: Board
  }

  BoardDecorator o-- Board

  class OriginalDecorator {
          + left(): void
          + right(): void
          + rotate(bool isClockwise): void
          + down(): void
          + drop(): void
          + levelUp(): void
          + levelDown(): void
          + display(): Vector<Vector<Character>>
  }

  class BlindDecorator {
          + left(): void
          + right(): void
          + rotate(bool isClockwise): void
          + down(): void
          + drop(): void
          + levelUp(): void
          + levelDown(): void
          + display(): Vector<Vector<Character>>
  }

  class HeavyDecorator {
          + left(): void
          + right(): void
          + rotate(bool isClockwise): void
          + down(): void
          + drop(): void
          + levelUp(): void
          + levelDown(): void
          + display(): Vector<Vector<Character>>
  }

  class ForceDecorator {
          + left(): void
          + right(): void
          + rotate(bool isClockwise): void
          + down(): void
          + drop(): void
          + levelUp(): void
          + levelDown(): void
          + display(): Vector<Vector<Character>>
  }

  Board <|-- BoardDecorator
  BoardDecorator <|-- OriginalDecorator
  BoardDecorator <|-- BlindDecorator
  BoardDecorator <|-- HeavyDecorator
  BoardDecorator <|-- ForceDecorator

  class Level {
          + levelNum: Integer
          + {abstract} genBlock(): Block
  }

  Level *-- Block

  class Level0 {
          + genBlock(): Block
  }

  class Level1 {
          + genBlock(): Block
  }

  class Level2 {
          + genBlock(): Block
  }

  class Level3 {
          + genBlock(): Block
  }

  class Level4 {
          + genBlock(): Block
  }

  Level <|-- Level0
  Level <|-- Level1
  Level <|-- Level2
  Level <|-- Level3
  Level <|-- Level4

  Board *-- Level

  class Block {
          + cells: Vector<Cell>
          + init(): void
  }

  Board *-- Block

  class Subject {
          - state: State
          + observers: Vector<Observer>
          + attach(Observer): void
          + detach(Observer): void
          + notifyObservers(): void
  }

  Subject *-- State

  class Observer{
          + notify(Subject): void
  }

  Subject o-- Observer

  class Cell {
          + blockLevel: Integer
          + pos: Coordinate
          + type: CellType
          + squad: Vector<Coordinate>
          + restore(): void
          + set(): void
          + notify(Subject): void
  }

  Board o-- Cell

  Cell *-- Coordinate
  Cell *-- CellType

  Subject <|-- Cell
  Observer <|-- Cell

  Block *-- Cell

  Cell o-- Cell

  enum CellType << enumeration >> {
          I
          J
          L
          O
          S
          Z
          T
          Empty
  }

  object Coordinate {
          row: Integer
          col: Integer
  }

  enum Direction << enumeration >> {
          Top
          Right
          Nil
          Left
          Bot
  }

  enum Status << enumeration >> {
          AllDead
          MeDead
          Alive
  }

  object State {
          direction: Direction
          status: Status
  }

  State *-- Direction
  State *-- Status

  @enduml
#+end_src
#+ATTR_LATEX: :height 20cm
#+RESULTS:
[[file:./uml1.png]]
